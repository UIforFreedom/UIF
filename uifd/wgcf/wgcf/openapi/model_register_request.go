/*
 * untitled API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 536
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterRequest struct for RegisterRequest
type RegisterRequest struct {
	FcmToken string `json:"fcm_token"`
	InstallId string `json:"install_id"`
	Key string `json:"key"`
	Locale string `json:"locale"`
	Model string `json:"model"`
	Tos string `json:"tos"`
	Type string `json:"type"`
}

// NewRegisterRequest instantiates a new RegisterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterRequest(fcmToken string, installId string, key string, locale string, model string, tos string, type_ string, ) *RegisterRequest {
	this := RegisterRequest{}
	this.FcmToken = fcmToken
	this.InstallId = installId
	this.Key = key
	this.Locale = locale
	this.Model = model
	this.Tos = tos
	this.Type = type_
	return &this
}

// NewRegisterRequestWithDefaults instantiates a new RegisterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterRequestWithDefaults() *RegisterRequest {
	this := RegisterRequest{}
	return &this
}

// GetFcmToken returns the FcmToken field value
func (o *RegisterRequest) GetFcmToken() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.FcmToken
}

// GetFcmTokenOk returns a tuple with the FcmToken field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetFcmTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FcmToken, true
}

// SetFcmToken sets field value
func (o *RegisterRequest) SetFcmToken(v string) {
	o.FcmToken = v
}

// GetInstallId returns the InstallId field value
func (o *RegisterRequest) GetInstallId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.InstallId
}

// GetInstallIdOk returns a tuple with the InstallId field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetInstallIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InstallId, true
}

// SetInstallId sets field value
func (o *RegisterRequest) SetInstallId(v string) {
	o.InstallId = v
}

// GetKey returns the Key field value
func (o *RegisterRequest) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *RegisterRequest) SetKey(v string) {
	o.Key = v
}

// GetLocale returns the Locale field value
func (o *RegisterRequest) GetLocale() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetLocaleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *RegisterRequest) SetLocale(v string) {
	o.Locale = v
}

// GetModel returns the Model field value
func (o *RegisterRequest) GetModel() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetModelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *RegisterRequest) SetModel(v string) {
	o.Model = v
}

// GetTos returns the Tos field value
func (o *RegisterRequest) GetTos() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Tos
}

// GetTosOk returns a tuple with the Tos field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetTosOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tos, true
}

// SetTos sets field value
func (o *RegisterRequest) SetTos(v string) {
	o.Tos = v
}

// GetType returns the Type field value
func (o *RegisterRequest) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RegisterRequest) SetType(v string) {
	o.Type = v
}

func (o RegisterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fcm_token"] = o.FcmToken
	}
	if true {
		toSerialize["install_id"] = o.InstallId
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["locale"] = o.Locale
	}
	if true {
		toSerialize["model"] = o.Model
	}
	if true {
		toSerialize["tos"] = o.Tos
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterRequest struct {
	value *RegisterRequest
	isSet bool
}

func (v NullableRegisterRequest) Get() *RegisterRequest {
	return v.value
}

func (v *NullableRegisterRequest) Set(val *RegisterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterRequest(val *RegisterRequest) *NullableRegisterRequest {
	return &NullableRegisterRequest{value: val, isSet: true}
}

func (v NullableRegisterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


